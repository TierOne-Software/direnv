name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: windows
            goarch: arm64
            suffix: ".exe"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        binary_name="direnv-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        go build -ldflags="-s -w" -o "${binary_name}" .
        echo "BINARY_NAME=${binary_name}" >> $GITHUB_ENV
        
        # For local testing with act, also output the binary info
        echo "Built binary: ${binary_name}"
        ls -la "${binary_name}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: direnv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.BINARY_NAME }}
        retention-days: 7
      # Continue on error for local act testing
      continue-on-error: ${{ env.ACT == 'true' }}

    # Alternative for local testing - create a binaries directory
    - name: Prepare binaries for local testing
      if: env.ACT == 'true'
      run: |
        mkdir -p dist
        cp "${{ env.BINARY_NAME }}" dist/
        echo "Binary copied to dist/ for local testing"

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries
      continue-on-error: ${{ env.ACT == 'true' }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: binaries/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
        token: ${{ secrets.GITHUB_TOKEN }}